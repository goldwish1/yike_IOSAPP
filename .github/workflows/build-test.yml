# 工作流名称和触发条件
name: Build Test

# 触发条件配置
on:
  # 当代码推送到以下分支时触发
  push:
    branches: [ main, develop, feature/*, bugfix/* ]
  # 当创建针对以下分支的PR时触发
  pull_request:
    branches: [ main, develop ]

# 工作流任务定义
jobs:
  build:
    name: 构建测试
    # 使用最新的macOS运行环境
    runs-on: macos-latest
    
    # 工作流步骤定义
    steps:
    # 步骤1: 签出代码
    - name: 签出代码
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 必须使用完整克隆，否则可能导致Xcode项目文件解析错误
    
    # 步骤2: 设置Xcode环境
    - name: 设置Xcode版本
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'  # 使用Xcode 15.0版本
    
    # 步骤3: 分析环境和项目路径
    - name: 分析环境和项目路径
      run: |
        # 打印工作目录和环境信息
        echo "=== 环境信息 ==="
        echo "Shell: $SHELL"
        echo "PWD: $(pwd)"
        echo "USER: $(whoami)"
        
        # 设置工作目录
        WORKFLOW_DIR=$(pwd)
        echo "WORKFLOW_DIR: $WORKFLOW_DIR"
        
        # 打印目录结构
        echo "=== 目录结构 ==="
        find . -maxdepth 3 -type d
        
        # 查找所有xcodeproj文件
        echo "=== 查找xcodeproj文件 ==="
        find . -name "*.xcodeproj" -type d
        
        # 检查xcodeproj文件内容
        XCODEPROJ_PATH=$(find . -name "*.xcodeproj" -type d | head -n 1)
        if [ -n "$XCODEPROJ_PATH" ]; then
          echo "=== xcodeproj文件内容 ==="
          ls -la "$XCODEPROJ_PATH"
          echo "=== project.pbxproj内容 ==="
          cat "$XCODEPROJ_PATH/project.pbxproj" || echo "无法读取project.pbxproj"
        fi
        
        # 保存项目信息
        echo "=== 保存项目信息 ==="
        mkdir -p /tmp/yike_project
        echo "XCODEPROJ_PATH=$XCODEPROJ_PATH" > /tmp/yike_project/path_info.txt
        echo "XCODEPROJ_NAME=$(basename "$XCODEPROJ_PATH")" >> /tmp/yike_project/path_info.txt
        echo "PROJECT_DIR=$(dirname "$XCODEPROJ_PATH")" >> /tmp/yike_project/path_info.txt
        
        # 设置文件权限
        echo "=== 设置文件权限 ==="
        chmod -R 755 "$XCODEPROJ_PATH"
        
        # 验证文件权限
        echo "=== 验证文件权限 ==="
        ls -la "$XCODEPROJ_PATH"
    
    # 步骤4: 安装项目依赖
    - name: 安装依赖
      run: |
        # 加载项目信息
        source /tmp/yike_project/path_info.txt
        
        echo "=== 项目信息 ==="
        echo "XCODEPROJ_PATH: $XCODEPROJ_PATH"
        echo "当前目录: $(pwd)"
        
        # 进入项目目录
        cd "$(dirname "$XCODEPROJ_PATH")"
        echo "切换到目录: $(pwd)"
        
        # 尝试解析依赖
        echo "=== 解析依赖 ==="
        xcodebuild -project "$(basename "$XCODEPROJ_PATH")" -resolvePackageDependencies -verbose
    
    # 步骤5: 构建应用
    - name: 构建应用
      run: |
        # 加载项目信息
        source /tmp/yike_project/path_info.txt
        
        # 进入项目目录
        cd "$(dirname "$XCODEPROJ_PATH")"
        echo "当前目录: $(pwd)"
        
        # 列出scheme
        echo "=== 可用的scheme ==="
        xcodebuild -project "$(basename "$XCODEPROJ_PATH")" -list
        
        # 执行构建
        echo "=== 开始构建 ==="
        xcodebuild clean build \
          -project "$(basename "$XCODEPROJ_PATH")" \
          -scheme "Yike" \
          -destination "platform=iOS Simulator,name=iPhone 15,OS=latest" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=YES \
          -verbose
    
    # 步骤6: 归档构建日志
    - name: 归档构建日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          **/*.log
          **/*.xcresult
          /tmp/yike_project/path_info.txt
          **/*.xcodeproj/project.pbxproj
        retention-days: 3