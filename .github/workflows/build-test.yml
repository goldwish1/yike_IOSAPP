# 工作流名称和触发条件
name: Build Test

# 触发条件配置
on:
  # 当代码推送到以下分支时触发
  push:
    branches: [ main, develop, feature/*, bugfix/* ]
  # 当创建针对以下分支的PR时触发
  pull_request:
    branches: [ main, develop ]

# 工作流任务定义
jobs:
  build:
    name: 构建测试
    # 使用最新的macOS运行环境
    runs-on: macos-latest
    
    # 工作流步骤定义
    steps:
    # 步骤1: 签出代码
    - name: 签出代码
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # 只获取最新的代码提交
    
    # 步骤2: 设置Xcode环境
    - name: 设置Xcode版本
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'  # 使用Xcode 15.0版本
    
    # 步骤3: 安装项目依赖
    - name: 安装依赖
      run: |
        # 定位Xcode项目并安装依赖
        XCODEPROJ_PATH=$(find . -name "*.xcodeproj" -type d | head -n 1)
        if [ -n "$XCODEPROJ_PATH" ]; then
          PROJECT_DIR=$(dirname "$XCODEPROJ_PATH")
          cd "$PROJECT_DIR"
          xcodebuild -resolvePackageDependencies
        else
          xcodebuild -resolvePackageDependencies
        fi
    
    # 步骤4: 构建应用
    - name: 构建应用
      run: |
        # 执行构建
        XCODEPROJ_PATH=$(find . -name "*.xcodeproj" -type d | head -n 1)
        if [ -n "$XCODEPROJ_PATH" ]; then
          PROJECT_DIR=$(dirname "$XCODEPROJ_PATH")
          cd "$PROJECT_DIR"
          xcodebuild clean build \
            -project "$(basename "$XCODEPROJ_PATH")" \
            -scheme "Yike" \
            -destination "platform=iOS Simulator,name=iPhone 15,OS=latest" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=YES
        else
          echo "未找到Xcode项目文件，无法构建"
          exit 1
        fi
        
    # 步骤5: 归档构建日志
    - name: 归档构建日志
      uses: actions/upload-artifact@v4
      if: failure()  # 仅在构建失败时归档日志
      with:
        name: build-logs
        path: "**/*.log"
        retention-days: 3  # 日志保留3天