name: Code Coverage

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # 每周一执行一次

jobs:
  coverage:
    name: 代码覆盖率报告
    runs-on: macos-latest
    
    steps:
    - name: 签出代码
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 必须使用完整克隆，否则可能导致Xcode项目文件解析错误
    
    - name: 设置Xcode版本
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
    
    - name: 检查项目状态
      run: |
        # 显示项目文件位置
        echo "查找Xcode项目文件:"
        find . -name "*.xcodeproj" -type d
        
        # 检查项目文件结构
        XCODEPROJ_PATH=$(find . -name "*.xcodeproj" -type d | head -n 1)
        if [ -n "$XCODEPROJ_PATH" ]; then
          echo "找到Xcode项目: $XCODEPROJ_PATH"
        else
          echo "未找到Xcode项目文件!"
          exit 1
        fi
    
    - name: 安装依赖
      run: |
        # 定位Xcode项目并安装依赖
        XCODEPROJ_PATH=$(find . -name "*.xcodeproj" -type d | head -n 1)
        if [ -n "$XCODEPROJ_PATH" ]; then
          PROJECT_DIR=$(dirname "$XCODEPROJ_PATH")
          cd "$PROJECT_DIR"
          xcodebuild -resolvePackageDependencies || true
        else
          xcodebuild -resolvePackageDependencies || true
        fi
        brew install xcbeautify || true
        
    - name: 安装xcresultparser
      run: |
        brew tap a7ex/homebrew-formulae || true
        brew install xcresultparser || true
    
    - name: 运行测试并生成覆盖率报告
      run: |
        # 列出可用的scheme
        echo "列出可用的scheme:"
        xcodebuild -list || true
        
        # 执行测试和覆盖率分析
        XCODEPROJ_PATH=$(find . -name "*.xcodeproj" -type d | head -n 1)
        if [ -n "$XCODEPROJ_PATH" ]; then
          PROJECT_DIR=$(dirname "$XCODEPROJ_PATH")
          cd "$PROJECT_DIR"
          
          xcodebuild test \
            -project "$(basename "$XCODEPROJ_PATH")" \
            -scheme "Yike" \
            -destination "platform=iOS Simulator,name=iPhone 15,OS=latest" \
            -testPlan "Yike" \
            -enableCodeCoverage YES \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=YES | xcbeautify || true
            
          # 将xcresult转换为HTML报告
          if [ -d "TestResults.xcresult" ]; then
            xcresultparser TestResults.xcresult --output coverage-report || true
          else
            echo "警告: 未找到TestResults.xcresult文件"
          fi
        else
          echo "未找到Xcode项目文件，无法运行测试"
          exit 1
        fi
    
    - name: 归档覆盖率报告
      uses: actions/upload-artifact@v4
      if: always()  # 无论成功失败都归档
      with:
        name: coverage-report
        path: |
          **/coverage-report/**
          **/*.xcresult
        retention-days: 14
        
    - name: 生成覆盖率摘要
      run: |
        if [ -d "TestResults.xcresult" ]; then
          echo "## 代码覆盖率摘要" > coverage-summary.md
          echo "" >> coverage-summary.md
          echo "\`\`\`" >> coverage-summary.md
          xcresultparser TestResults.xcresult --text-summary >> coverage-summary.md || echo "无法生成覆盖率摘要" >> coverage-summary.md
          echo "\`\`\`" >> coverage-summary.md
        else
          echo "## 代码覆盖率摘要" > coverage-summary.md
          echo "" >> coverage-summary.md
          echo "警告: 无法找到测试结果文件" >> coverage-summary.md
        fi
        
    - name: 添加PR评论
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && always()
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          if (fs.existsSync('coverage-summary.md')) {
            const summary = fs.readFileSync('coverage-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "覆盖率报告生成失败，请检查构建日志了解详情。"
            });
          } 